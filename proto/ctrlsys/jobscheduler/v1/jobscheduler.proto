syntax = "proto3";

package ctrlsys.jobscheduler.v1;

option go_package = "github.com/t-eckert/ctrlsys/gen/go/ctrlsys/jobscheduler/v1";

// JobSchedulerService provides job scheduling capabilities
service JobSchedulerService {
  // Schedule a job to run in Kubernetes
  rpc ScheduleJob(ScheduleJobRequest) returns (ScheduleJobResponse);

  // Get the status of a scheduled job
  rpc GetJobStatus(GetJobStatusRequest) returns (GetJobStatusResponse);

  // List all jobs with optional filtering
  rpc ListJobs(ListJobsRequest) returns (ListJobsResponse);

  // Cancel a scheduled job
  rpc CancelJob(CancelJobRequest) returns (CancelJobResponse);
}

message ScheduleJobRequest {
  // Unique identifier for the job (optional, will be generated if not provided)
  string job_id = 1;

  // Human-readable name for the job
  string name = 2;

  // Job type and configuration
  oneof job_config {
    TimerJobConfig timer_job = 10;
    // Future job types can be added here:
    // WeatherReporterJobConfig weather_reporter_job = 11;
    // HealthCheckJobConfig health_check_job = 12;
  }

  // Optional labels for the job
  map<string, string> labels = 3;

  // Optional annotations for the job
  map<string, string> annotations = 4;

  // Resource requirements
  ResourceRequirements resources = 5;

  // Optional namespace (defaults to default)
  string namespace = 6;

  // Optional created_by field
  string created_by = 7;
}

message ScheduleJobResponse {
  // Unique identifier for the scheduled job
  string job_id = 1;

  // Status of the scheduling operation
  JobStatus status = 2;

  // Human-readable message
  string message = 3;

  // Kubernetes job name that was created
  string k8s_job_name = 4;
}

message GetJobStatusRequest {
  string job_id = 1;
}

message GetJobStatusResponse {
  string job_id = 1;
  JobInfo job_info = 2;
  JobStatus status = 3;
  string message = 4;
}

message ListJobsRequest {
  // Optional label selector
  map<string, string> label_selector = 1;

  // Optional namespace filter
  string namespace = 2;

  // Optional status filter
  repeated JobStatus status_filter = 3;

  // Pagination
  int32 page_size = 4;
  string page_token = 5;
}

message ListJobsResponse {
  repeated JobInfo jobs = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

message CancelJobRequest {
  string job_id = 1;
}

message CancelJobResponse {
  bool success = 1;
  string message = 2;
}

// Job configuration for Timer jobs
message TimerJobConfig {
  // Duration in seconds for the timer
  int64 duration_seconds = 1;

  // Timer name
  string timer_name = 2;

  // Control plane endpoint for reporting completion
  string control_plane_endpoint = 3;

  // Container image to use (optional, defaults to configured image)
  string image = 4;

  // Log level for the timer service
  string log_level = 5;

  // Additional environment variables
  map<string, string> env = 6;
}

// Resource requirements for jobs
message ResourceRequirements {
  ResourceList requests = 1;
  ResourceList limits = 2;
}

message ResourceList {
  string cpu = 1;
  string memory = 2;
  string storage = 3;
}

// Job information
message JobInfo {
  string job_id = 1;
  string name = 2;
  string k8s_job_name = 3;
  string namespace = 4;
  JobStatus status = 5;
  int64 created_at = 6;
  int64 started_at = 7;
  int64 completed_at = 8;
  string created_by = 9;
  map<string, string> labels = 10;
  map<string, string> annotations = 11;

  // Job type specific information
  oneof job_details {
    TimerJobDetails timer_details = 20;
  }
}

message TimerJobDetails {
  int64 duration_seconds = 1;
  string timer_name = 2;
  string control_plane_endpoint = 3;
}

enum JobStatus {
  JOB_STATUS_UNSPECIFIED = 0;
  JOB_STATUS_PENDING = 1;
  JOB_STATUS_RUNNING = 2;
  JOB_STATUS_SUCCEEDED = 3;
  JOB_STATUS_FAILED = 4;
  JOB_STATUS_CANCELLED = 5;
}