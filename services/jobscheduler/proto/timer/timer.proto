syntax = "proto3";

package timer;

service TimerService {
  // Check the current state of the timer
  rpc CheckTimer(CheckTimerRequest) returns (CheckTimerResponse);

  // Stream the timer's current state
  rpc StreamTimer(StreamTimerRequest) returns (stream StreamTimerResponse);
}

service ControlPlaneService {
  // Called when timer completes
  rpc ReportTimerComplete(ReportTimerCompleteRequest) returns (ReportTimerCompleteResponse);
}

message CheckTimerRequest {
  string timer_id = 1;
}

message CheckTimerResponse {
  string timer_id = 1;
  TimerMetadata metadata = 2;
  TimerState state = 3;
  int64 elapsed_seconds = 4;
  int64 remaining_seconds = 5;
}

message StreamTimerRequest {
  string timer_id = 1;
}

message StreamTimerResponse {
  string timer_id = 1;
  TimerState state = 2;
  int64 elapsed_seconds = 3;
  int64 remaining_seconds = 4;
  int64 timestamp = 5;
}

message ReportTimerCompleteRequest {
  string timer_id = 1;
  TimerMetadata metadata = 2;
  int64 total_duration_seconds = 3;
  int64 completed_at = 4;
}

message ReportTimerCompleteResponse {
  bool acknowledged = 1;
}

message TimerMetadata {
  string timer_id = 1;
  string name = 2;
  map<string, string> labels = 3;
  int64 duration_seconds = 4;
  int64 created_at = 5;
  string created_by = 6;
}

enum TimerState {
  TIMER_STATE_UNSPECIFIED = 0;
  TIMER_STATE_STARTING = 1;
  TIMER_STATE_RUNNING = 2;
  TIMER_STATE_COMPLETED = 3;
  TIMER_STATE_FAILED = 4;
}
