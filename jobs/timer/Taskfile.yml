# Timer Microservice Tasks

version: '3'

vars:
  SERVICE_NAME: timer-service
  IMAGE_TAG: '{{.IMAGE_TAG | default "latest"}}'
  REGISTRY: '{{.REGISTRY | default "your-registry"}}'

tasks:
  # Build tasks
  build:
    desc: "Build timer service"
    cmds:
      - cargo build

  build:release:
    desc: "Build timer service (release)"
    cmds:
      - cargo build --release

  # Test tasks
  test:
    desc: "Run timer tests"
    cmds:
      - cargo test

  test:integration:
    desc: "Run integration tests"
    cmds:
      - cargo test --test integration

  # Code quality
  fmt:
    desc: "Format timer code"
    cmds:
      - cargo fmt

  clippy:
    desc: "Run clippy on timer"
    cmds:
      - cargo clippy -- -D warnings

  check:
    desc: "Check timer (fmt + clippy + test)"
    cmds:
      - task: fmt
      - task: clippy
      - task: test

  # Development
  run:
    desc: "Run timer service locally"
    env:
      TIMER_DURATION_SECONDS: '{{.TIMER_DURATION_SECONDS | default "300"}}'
      CONTROL_PLANE_ENDPOINT: '{{.CONTROL_PLANE_ENDPOINT | default "http://localhost:50053"}}'
      RUST_LOG: '{{.RUST_LOG | default "info"}}'
      TIMER_NAME: '{{.TIMER_NAME | default "dev-timer"}}'
    cmds:
      - cargo run

  run:debug:
    desc: "Run timer service with debug logging"
    env:
      TIMER_DURATION_SECONDS: '{{.TIMER_DURATION_SECONDS | default "60"}}'
      CONTROL_PLANE_ENDPOINT: '{{.CONTROL_PLANE_ENDPOINT | default "http://localhost:50053"}}'
      RUST_LOG: debug
      TIMER_NAME: debug-timer
    cmds:
      - cargo run

  watch:
    desc: "Watch and rebuild timer"
    cmds:
      - cargo watch -x build

  watch:test:
    desc: "Watch and test timer"
    cmds:
      - cargo watch -x test

  # Container tasks
  container:build:
    desc: "Build timer container image"
    cmds:
      - podman build -t {{.SERVICE_NAME}}:{{.IMAGE_TAG}} .

  container:run:
    desc: "Run timer in Podman"
    env:
      TIMER_DURATION_SECONDS: '{{.TIMER_DURATION_SECONDS | default "300"}}'
      CONTROL_PLANE_ENDPOINT: '{{.CONTROL_PLANE_ENDPOINT | default "http://host.containers.internal:50053"}}'
    cmds:
      - podman run --rm -p 50051:50051
        -e TIMER_DURATION_SECONDS=$TIMER_DURATION_SECONDS
        -e CONTROL_PLANE_ENDPOINT=$CONTROL_PLANE_ENDPOINT
        -e RUST_LOG=info
        {{.SERVICE_NAME}}:{{.IMAGE_TAG}}

  container:push:
    desc: "Push timer container image"
    cmds:
      - podman tag {{.SERVICE_NAME}}:{{.IMAGE_TAG}} {{.REGISTRY}}/{{.SERVICE_NAME}}:{{.IMAGE_TAG}}
      - podman push {{.REGISTRY}}/{{.SERVICE_NAME}}:{{.IMAGE_TAG}}

  container:logs:
    desc: "Show container logs"
    cmds:
      - podman logs {{.SERVICE_NAME}}:{{.IMAGE_TAG}} || echo "Container not running"

  container:stop:
    desc: "Stop running timer container"
    cmds:
      - podman stop {{.SERVICE_NAME}} || echo "Container not running"

  # Kubernetes tasks
  k8s:apply:
    desc: "Apply timer Kubernetes resources"
    cmds:
      - kubectl apply -f k8s/

  k8s:delete:
    desc: "Delete timer Kubernetes resources"
    cmds:
      - kubectl delete -f k8s/ --ignore-not-found=true

  k8s:logs:
    desc: "Show timer logs in Kubernetes"
    cmds:
      - kubectl logs -l app=timer-service --tail=100 -f

  k8s:status:
    desc: "Show timer status in Kubernetes"
    cmds:
      - kubectl get jobs,pods -l app=timer-service

  # Deployment
  deploy:
    desc: "Deploy timer (build + push + apply)"
    cmds:
      - task: container:build
      - task: container:push
      - task: k8s:apply

  deploy:script:
    desc: "Deploy using deploy script"
    cmds:
      - ./scripts/deploy.sh

  # Health and monitoring
  health:
    desc: "Check timer health"
    cmds:
      - cargo run -- health

  # Cleanup
  clean:
    desc: "Clean timer build artifacts"
    cmds:
      - cargo clean
      - rm -rf target/

  logs:
    desc: "Show local timer logs"
    cmds:
      - tail -f /tmp/timer-service.log || echo "No log file found"

  # Development shortcuts
  dev:
    desc: "Quick development cycle"
    cmds:
      - task: check
      - task: run:debug
